}
# Filter for 1-star reviews
one_star_reviews <- reviews_df[reviews_df$Rating == 1, ]
if (nrow(one_star_reviews) == 0) {
cat("No 1-star reviews found.\n")
return()
}
cat("No 1-star reviews found.\n")
# Filter for 1-star reviews
one_star_reviews <- reviews_df[reviews_df$Rating == 1, ]
if (nrow(one_star_reviews) == 0) {
cat("No 1-star reviews found.\n")
return()
}
# Filter for 1-star reviews
one_star_reviews <- reviews_df[reviews_df$Rating == 1, ]
if (nrow(one_star_reviews) == 0) {
cat("No 1-star reviews found.\n")
return()
}
# Initialize word frequency table
word_freq <- list()
# Process each review
for (text in one_star_reviews$Review.Text) {
words <- split_words(text)
# Count each word
for (word in words) {
if (nchar(word) > 0) { # Skip empty words
word_freq[[word]] <- (word_freq[[word]] %||% 0) + 1
}
}
}
# Convert to data frame for sorting
word_df <- data.frame(
word = names(word_freq),
count = unlist(word_freq),
stringsAsFactors = FALSE
)
# Sort by count (descending), then alphabetically for ties
word_df <- word_df[order(-word_df$count, word_df$word), ]
# Select top 5 words
top_n <- min(5, nrow(word_df))
top_words <- word_df[1:top_n, ]
# Calculate execution time
end_time <- Sys.time()
elapsed_ms <- as.numeric(difftime(end_time, start_time, units = "secs")) * 1000
# Output results
cat("Top", top_n, "frequent words in 1-star reviews:\n")
for (i in 1:top_n) {
cat(top_words$word[i], ":", top_words$count[i], "\n")
}
cat("Execution time:", elapsed_ms, "ms\n")
# Function to count word frequencies in 1-star reviews
find_frequent_words <- function(reviews_df) {
start_time <- Sys.time()
if (is.null(reviews_df)) {
cat("Cannot process reviews: Data loading failed.\n")
return()
}
# Filter for 1-star reviews
one_star_reviews <- reviews_df[reviews_df$Rating == 1, ]
if (nrow(one_star_reviews) == 0) {
cat("No 1-star reviews found.\n")
return()
}
# Initialize word frequency table
word_freq <- list()
# Process each review
for (text in one_star_reviews$Review.Text) {
words <- split_words(text)
# Count each word
for (word in words) {
if (nchar(word) > 0) { # Skip empty words
word_freq[[word]] <- (word_freq[[word]] %||% 0) + 1
}
}
}
# Convert to data frame for sorting
word_df <- data.frame(
word = names(word_freq),
count = unlist(word_freq),
stringsAsFactors = FALSE
)
# Sort by count (descending), then alphabetically for ties
word_df <- word_df[order(-word_df$count, word_df$word), ]
# Select top 5 words
top_n <- min(5, nrow(word_df))
top_words <- word_df[1:top_n, ]
# Calculate execution time
end_time <- Sys.time()
elapsed_ms <- as.numeric(difftime(end_time, start_time, units = "secs")) * 1000
# Output results
cat("Top", top_n, "frequent words in 1-star reviews:\n")
for (i in 1:top_n) {
cat(top_words$word[i], ":", top_words$count[i], "\n")
}
cat("Execution time:", elapsed_ms, "ms\n")
}
# Main function
main <- function() {
# Load reviews
reviews_df <- load_reviews("reviews.csv")
# Find frequent words
find_frequent_words(reviews_df)
}
# Run the script
main()
# Function to load reviews.csv
load_reviews <- function(filename) {
tryCatch({
data <- read.csv(filename, stringsAsFactors = FALSE)
# Check required columns
required_cols <- c("Product.ID", "Customer.ID", "Rating", "Review.Text")
if (!all(required_cols %in% colnames(data))) {
stop("Missing required columns in reviews.csv")
}
return(data)
}, error = function(e) {
cat("Error loading reviews.csv:", conditionMessage(e), "\n")
return(NULL)
})
}
# Function to clean and split text into words
split_words <- function(text) {
# Convert to lowercase and replace non-alphanumeric with spaces
clean_text <- tolower(gsub("[^[:alnum:]]", " ", text))
# Split on whitespace and remove empty strings
words <- unlist(strsplit(clean_text, "\\s+"))
words <- words[words != ""]
return(words)
}
# R Script for Question 3: Frequent Words in 1-Star Reviews
# Lists top 5 words with their counts from reviews.csv
# Uses base R, no external packages
# Function to load reviews.csv
load_reviews <- function(filename) {
tryCatch({
data <- read.csv(filename, stringsAsFactors = FALSE)
# Check required columns
required_cols <- c("Product.ID", "Customer.ID", "Rating", "Review.Text")
if (!all(required_cols %in% colnames(data))) {
stop("Missing required columns in reviews.csv")
}
return(data)
}, error = function(e) {
cat("Error loading reviews.csv:", conditionMessage(e), "\n")
return(NULL)
})
}
# Function to clean and split text into words
split_words <- function(text) {
# Convert to lowercase and replace non-alphanumeric with spaces
clean_text <- tolower(gsub("[^[:alnum:]]", " ", text))
# Split on whitespace and remove empty strings
words <- unlist(strsplit(clean_text, "\\s+"))
words <- words[words != ""]
return(words)
}
# Function to count word frequencies in 1-star reviews
find_frequent_words <- function(reviews_df) {
start_time <- Sys.time()
if (is.null(reviews_df)) {
cat("Cannot process reviews: Data loading failed.\n")
return()
}
# Filter for 1-star reviews
one_star_reviews <- reviews_df[reviews_df$Rating == 1, ]
if (nrow(one_star_reviews) == 0) {
cat("No 1-star reviews found.\n")
return()
}
# Initialize word frequency table
word_freq <- list()
# Process each review
for (text in one_star_reviews$Review.Text) {
words <- split_words(text)
# Count each word
for (word in words) {
if (nchar(word) > 0) { # Skip empty words
word_freq[[word]] <- (word_freq[[word]] %||% 0) + 1
}
}
}
# Convert to data frame for sorting
word_df <- data.frame(
word = names(word_freq),
count = unlist(word_freq),
stringsAsFactors = FALSE
)
# Sort by count (descending), then alphabetically for ties
word_df <- word_df[order(-word_df$count, word_df$word), ]
# Select top 5 words
top_n <- min(5, nrow(word_df))
top_words <- word_df[1:top_n, ]
# Calculate execution time
end_time <- Sys.time()
elapsed_ms <- as.numeric(difftime(end_time, start_time, units = "secs")) * 1000
# Output results
cat("Top", top_n, "frequent words in 1-star reviews:\n")
for (i in 1:top_n) {
cat(top_words$word[i], ":", top_words$count[i], "\n")
}
cat("Execution time:", elapsed_ms, "ms\n")
}
# Main function
main <- function() {
# Load reviews
reviews_df <- load_reviews("reviews_cleaned.csv")
# Find frequent words
find_frequent_words(reviews_df)
}
# Run the script
main()
# R Script for Question 3: Frequent Words in 1-Star Reviews
# Lists top 5 words with their counts from reviews.csv
# Uses base R, no external packages
# Function to load reviews.csv
load_reviews <- function(filename) {
tryCatch({
data <- read.csv(filename, stringsAsFactors = FALSE)
# Check required columns
required_cols <- c("Product.ID", "Customer.ID", "Rating", "Review.Text")
if (!all(required_cols %in% colnames(data))) {
stop("Missing required columns in reviews.csv")
}
return(data)
}, error = function(e) {
cat("Error loading reviews.csv:", conditionMessage(e), "\n")
return(NULL)
})
}
# Function to clean and split text into words
split_words <- function(text) {
# Convert to lowercase and replace non-alphanumeric with spaces
clean_text <- tolower(gsub("[^[:alnum:]]", " ", text))
# Split on whitespace and remove empty strings
words <- unlist(strsplit(clean_text, "\\s+"))
words <- words[words != ""]
return(words)
}
# Function to count word frequencies in 1-star reviews
find_frequent_words <- function(reviews_df) {
start_time <- Sys.time()
if (is.null(reviews_df)) {
cat("Cannot process reviews: Data loading failed.\n")
return()
}
# Filter for 1-star reviews
one_star_reviews <- reviews_df[reviews_df$Rating == 1, ]
if (nrow(one_star_reviews) == 0) {
cat("No 1-star reviews found.\n")
return()
}
# Initialize word frequency table
word_freq <- list()
# Process each review
for (text in one_star_reviews$Review.Text) {
words <- split_words(text)
# Count each word
for (word in words) {
if (nchar(word) > 0) { # Skip empty words
word_freq[[word]] <- (word_freq[[word]] %||% 0) + 1
}
}
}
# Convert to data frame for sorting
word_df <- data.frame(
word = names(word_freq),
count = unlist(word_freq),
stringsAsFactors = FALSE
)
# Sort by count (descending), then alphabetically for ties
word_df <- word_df[order(-word_df$count, word_df$word), ]
# Select top 5 words
top_n <- min(5, nrow(word_df))
top_words <- word_df[1:top_n, ]
# Calculate execution time
end_time <- Sys.time()
elapsed_ms <- as.numeric(difftime(end_time, start_time, units = "secs")) * 1000
# Output results
cat("Top", top_n, "frequent words in 1-star reviews:\n")
for (i in 1:top_n) {
cat(top_words$word[i], ":", top_words$count[i], "\n")
}
cat("Execution time:", elapsed_ms, "ms\n")
}
# Main function
main <- function() {
# Load reviews
reviews_df <- load_reviews("reviews_cleaned.csv")
# Find frequent words
find_frequent_words(reviews_df)
}
# Run the script
main()
# Main function
main <- function() {
# Load reviews
reviews_df <- load_reviews("reviews_cleaned.csv")
# Find frequent words
find_frequent_words(reviews_df)
}
# Main function
main <- function() {
# Load reviews
reviews_df <- load_reviews("reviews_cleaned.csv")
# Find frequent words
find_frequent_words(reviews_df)
}
# Run the script
main()
# Main function
main <- function() {
# Load reviews
reviews_df <- load_reviews("reviews_cleaned.csv")
# Find frequent words
find_frequent_words(reviews_df)
}
# Run the script
main()
# Load reviews
reviews_df <- load_reviews("reviews_cleaned.csv")
# Find frequent words
find_frequent_words(reviews_df)
# Main function
main <- function() {
# Load reviews
reviews_df <- load_reviews("reviews_cleaned.csv")
# Find frequent words
find_frequent_words(reviews_df)
}
# Run the script
main()
# Sort by count (descending), then alphabetically for ties
word_df <- word_df[order(-word_df$count, word_df$word), ]
# Select top 5 words
top_n <- min(5, nrow(word_df))
top_words <- word_df[1:top_n, ]
# Calculate execution time
end_time <- Sys.time()
# R Script for Question 3: Frequent Words in 1-Star Reviews
# Lists top 5 words with their counts from reviews.csv
# Uses base R, no external packages
# Function to load reviews.csv
load_reviews <- function(filename) {
tryCatch({
data <- read.csv(filename, stringsAsFactors = FALSE)
# Check required columns
required_cols <- c("Product.ID", "Customer.ID", "Rating", "Review.Text")
if (!all(required_cols %in% colnames(data))) {
stop("Missing required columns in reviews.csv")
}
return(data)
}, error = function(e) {
cat("Error loading reviews.csv:", conditionMessage(e), "\n")
return(NULL)
})
}
# Function to clean and split text into words
split_words <- function(text) {
# Convert to lowercase and replace non-alphanumeric with spaces
clean_text <- tolower(gsub("[^[:alnum:]]", " ", text))
# Split on whitespace and remove empty strings
words <- unlist(strsplit(clean_text, "\\s+"))
words <- words[words != ""]
return(words)
}
# Function to count word frequencies in 1-star reviews
find_frequent_words <- function(reviews_df) {
start_time <- Sys.time()
if (is.null(reviews_df)) {
cat("Cannot process reviews: Data loading failed.\n")
return()
}
# Filter for 1-star reviews
one_star_reviews <- reviews_df[reviews_df$Rating == 1, ]
if (nrow(one_star_reviews) == 0) {
cat("No 1-star reviews found.\n")
return()
}
# Initialize word frequency table
word_freq <- list()
# Process each review
for (text in one_star_reviews$Review.Text) {
words <- split_words(text)
# Count each word
for (word in words) {
if (nchar(word) > 0) { # Skip empty words
word_freq[[word]] <- (word_freq[[word]] %||% 0) + 1
}
}
}
# Convert to data frame for sorting
word_df <- data.frame(
word = names(word_freq),
count = unlist(word_freq),
stringsAsFactors = FALSE
)
# Sort by count (descending), then alphabetically for ties
word_df <- word_df[order(-word_df$count, word_df$word), ]
# Select top 5 words
top_n <- min(5, nrow(word_df))
top_words <- word_df[1:top_n, ]
# Calculate execution time
end_time <- Sys.time()
elapsed_ms <- as.numeric(difftime(end_time, start_time, units = "secs")) * 1000
# Output results
cat("Top", top_n, "frequent words in 1-star reviews:\n")
for (i in 1:top_n) {
cat(top_words$word[i], ":", top_words$count[i], "\n")
}
cat("Execution time:", elapsed_ms, "ms\n")
}
# Main function
main <- function() {
# Load reviews
reviews_df <- load_reviews("reviews_cleaned.csv")
# Find frequent words
find_frequent_words(reviews_df)
}
# Run the script
main()
# Main function
main <- function() {
# Load reviews
reviews_df <- load_reviews("reviews_cleaned.csv")
# Find frequent words
find_frequent_words(reviews_df)
}
# Run the script
main()
# Output results
cat("Top", top_n, "frequent words in 1-star reviews:\n")
# Function to load reviews.csv
load_reviews <- function(filename) {
tryCatch({
data <- read.csv(filename, stringsAsFactors = FALSE)
# Check required columns
required_cols <- c("Product.ID", "Customer.ID", "Rating", "Review.Text")
if (!all(required_cols %in% colnames(data))) {
stop("Missing required columns in reviews.csv")
}
return(data)
}, error = function(e) {
cat("Error loading reviews.csv:", conditionMessage(e), "\n")
return(NULL)
})
}
# Function to clean and split text into words
split_words <- function(text) {
# Convert to lowercase and replace non-alphanumeric with spaces
clean_text <- tolower(gsub("[^[:alnum:]]", " ", text))
# Split on whitespace and remove empty strings
words <- unlist(strsplit(clean_text, "\\s+"))
words <- words[words != ""]
return(words)
}
# Function to count word frequencies in 1-star reviews
find_frequent_words <- function(reviews_df) {
start_time <- Sys.time()
if (is.null(reviews_df)) {
cat("Cannot process reviews: Data loading failed.\n")
return()
}
# Filter for 1-star reviews
one_star_reviews <- reviews_df[reviews_df$Rating == 1, ]
if (nrow(one_star_reviews) == 0) {
cat("No 1-star reviews found.\n")
return()
}
# Initialize word frequency table
word_freq <- list()
# Process each review
for (text in one_star_reviews$Review.Text) {
words <- split_words(text)
# Count each word
for (word in words) {
if (nchar(word) > 0) { # Skip empty words
word_freq[[word]] <- (word_freq[[word]] %||% 0) + 1
}
}
}
# Convert to data frame for sorting
word_df <- data.frame(
word = names(word_freq),
count = unlist(word_freq),
stringsAsFactors = FALSE
)
# Sort by count (descending), then alphabetically for ties
word_df <- word_df[order(-word_df$count, word_df$word), ]
# Select top 5 words
top_n <- min(5, nrow(word_df))
top_words <- word_df[1:top_n, ]
# Calculate execution time
end_time <- Sys.time()
elapsed_ms <- as.numeric(difftime(end_time, start_time, units = "secs")) * 1000
# Output results
cat("Top", top_n, "frequent words in 1-star reviews:\n")
for (i in 1:top_n) {
cat(top_words$word[i], ":", top_words$count[i], "\n")
}
cat("Execution time:", elapsed_ms, "ms\n")
}
# Main function
main <- function() {
# Load reviews
reviews_df <- load_reviews("reviews_cleaned.csv")
# Find frequent words
find_frequent_words(reviews_df)
}
# Run the script
main()
