#include "linked-list.hpp"
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <chrono>
#include <map>
#include <algorithm>
#include <cmath>
#include <iomanip> // For setw and other formatting

// Helper function implementation
std::string standardizeDate(const std::string& date) {
    // Implementation would go here
    // For now, just return the date as is
    return date;
}

// LinkedList class implementation
LinkedList::LinkedList() : transactionHead(nullptr), reviewHead(nullptr), transactionCount(0), reviewCount(0) {}

LinkedList::~LinkedList() {
    // Clean up transaction nodes
    TransactionNode* currentT = transactionHead;
    while (currentT != nullptr) {
        TransactionNode* temp = currentT;
        currentT = currentT->next;
        delete temp;
    }
    
    // Clean up review nodes
    ReviewNode* currentR = reviewHead;
    while (currentR != nullptr) {
        ReviewNode* temp = currentR;
        currentR = currentR->next;
        delete temp;
    }
}

void LinkedList::addTransaction(const Transaction& t) {
    TransactionNode* newNode = new TransactionNode(t);
    if (transactionHead == nullptr) {
        transactionHead = newNode;
    } else {
        TransactionNode* current = transactionHead;
        while (current->next != nullptr) {
            current = current->next;
        }
        current->next = newNode;
    }
    transactionCount++;
}

void LinkedList::addReview(const Review& r) {
    ReviewNode* newNode = new ReviewNode(r);
    if (reviewHead == nullptr) {
        reviewHead = newNode;
    } else {
        ReviewNode* current = reviewHead;
        while (current->next != nullptr) {
            current = current->next;
        }
        current->next = newNode;
    }
    reviewCount++;
}

void LinkedList::sortTransactionsByDate(int sortChoice, long long& duration_ms) {
    auto start = std::chrono::high_resolution_clock::now();
    
    std::string sortName;
    if (sortChoice == 1) {
        // Bubble Sort
        bubbleSortTransactions();
        sortName = "Bubble Sort";
    } else if (sortChoice == 2) {
        // Insertion Sort
        insertionSortTransactions();
        sortName = "Insertion Sort";
    } else if (sortChoice == 3) {
        // Selection Sort
        selectionSortTransactions();
        sortName = "Selection Sort";
    } else if (sortChoice == 4) {
        // Merge Sort
        transactionHead = mergeSortTransactions(transactionHead);
        sortName = "Merge Sort";
    }
    
    auto end = std::chrono::high_resolution_clock::now();
    duration_ms = std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count();
    
    // Display results
    std::cout << "\n[" << sortName << "] Execution time: " << duration_ms << " ms\n";
    std::cout << "Total transactions: " << transactionCount << "\n";
    std::cout << "Total reviews: " << reviewCount << "\n\n";
    
    // Display sample sorted transactions in tabular format
    displaySortedTransactions();
    
    // Count transactions by date
    countTransactionsByDate();
}

void LinkedList::displaySortedTransactions() {
    std::cout << "Sample Sorted Transactions:\n";
    
    // Print header
    std::cout << std::left
              << std::setw(12) << "Date" << " | "
              << std::setw(12) << "CustomerID" << " | "
              << std::setw(15) << "Product" << " | "
              << std::setw(15) << "Category" << " | "
              << "Price" << std::endl;
    
    // Print separator
    std::cout << std::string(70, '-') << std::endl;
    
    // Print sample transactions (first 5)
    int count = 0;
    TransactionNode* current = transactionHead;
    while (current != nullptr && count < 5) {
        std::cout << std::left
                  << std::setw(12) << current->data.date << " | "
                  << std::setw(12) << current->data.customer_id << " | "
                  << std::setw(15) << current->data.product << " | "
                  << std::setw(15) << current->data.category << " | "
                  << std::fixed << std::setprecision(2) << current->data.price << std::endl;
        current = current->next;
        count++;
    }
    std::cout << std::endl;
}

void LinkedList::bubbleSortTransactions() {
    if (transactionHead == nullptr || transactionHead->next == nullptr) return;
    
    bool swapped;
    TransactionNode* current;
    TransactionNode* last = nullptr;
    
    do {
        swapped = false;
        current = transactionHead;
        
        while (current->next != last) {
            if (current->data.date > current->next->data.date) {
                // Swap data (not nodes)
                Transaction temp = current->data;
                current->data = current->next->data;
                current->next->data = temp;
                swapped = true;
            }
            current = current->next;
        }
        last = current;
    } while (swapped);
}

void LinkedList::insertionSortTransactions() {
    if (transactionHead == nullptr || transactionHead->next == nullptr) return;
    
    TransactionNode* sorted = nullptr;
    TransactionNode* current = transactionHead;
    
    while (current != nullptr) {
        TransactionNode* next = current->next;
        
        if (sorted == nullptr || sorted->data.date >= current->data.date) {
            current->next = sorted;
            sorted = current;
        } else {
            TransactionNode* search = sorted;
            while (search->next != nullptr && search->next->data.date < current->data.date) {
                search = search->next;
            }
            current->next = search->next;
            search->next = current;
        }
        
        current = next;
    }
    
    transactionHead = sorted;
}

void LinkedList::selectionSortTransactions() {
    if (transactionHead == nullptr || transactionHead->next == nullptr) return;
    
    TransactionNode* current = transactionHead;
    
    while (current != nullptr) {
        TransactionNode* min = current;
        TransactionNode* r = current->next;
        
        while (r != nullptr) {
            if (r->data.date < min->data.date) {
                min = r;
            }
            r = r->next;
        }
        
        if (min != current) {
            // Swap data (not nodes)
            Transaction temp = current->data;
            current->data = min->data;
            min->data = temp;
        }
        
        current = current->next;
    }
}

TransactionNode* LinkedList::mergeSortTransactions(TransactionNode* head) {
    // Base case
    if (head == nullptr || head->next == nullptr) {
        return head;
    }
    
    // Split the list into two halves
    TransactionNode* middle = getMiddle(head);
    TransactionNode* nextOfMiddle = middle->next;
    middle->next = nullptr;
    
    // Recursively sort both lists
    TransactionNode* left = mergeSortTransactions(head);
    TransactionNode* right = mergeSortTransactions(nextOfMiddle);
    
    // Merge the sorted lists
    TransactionNode* sortedList = sortedMerge(left, right);
    return sortedList;
}

TransactionNode* LinkedList::getMiddle(TransactionNode* head) {
    if (head == nullptr) return head;
    
    TransactionNode* slow = head;
    TransactionNode* fast = head->next;
    
    while (fast != nullptr) {
        fast = fast->next;
        if (fast != nullptr) {
            slow = slow->next;
            fast = fast->next;
        }
    }
    return slow;
}

TransactionNode* LinkedList::sortedMerge(TransactionNode* a, TransactionNode* b) {
    TransactionNode* result = nullptr;
    
    // Base cases
    if (a == nullptr) return b;
    if (b == nullptr) return a;
    
    // Pick smaller value
    if (a->data.date <= b->data.date) {
        result = a;
        result->next = sortedMerge(a->next, b);
    } else {
        result = b;
        result->next = sortedMerge(a, b->next);
    }
    return result;
}

void LinkedList::countTransactionsByDate() {
    std::map<std::string, int> dateCounts;
    TransactionNode* current = transactionHead;
    
    while (current != nullptr) {
        dateCounts[current->data.date]++;
        current = current->next;
    }
    
    std::cout << "Transaction Counts by Date:\n";
    for (const auto& pair : dateCounts) {
        std::cout << pair.first << ": " << pair.second << " transactions\n";
    }
}

void LinkedList::calculateElectronicsCreditCardPercentage(int searchChoice, int sortChoice, long long& duration_ms) {
    auto start = std::chrono::high_resolution_clock::now();
    
    int totalElectronics = 0;
    int electronicsCreditCard = 0;
    
    // Create a new linked list for electronics transactions
    TransactionNode* electronicsHead = nullptr;
    
    // First use search algorithm to find Electronics transactions
    if (searchChoice == 1) {
        // Linear Search
        TransactionNode* current = transactionHead;
        while (current != nullptr) {
            if (current->data.category == "Electronics") {
                // Add this transaction to our electronics list
                TransactionNode* newNode = new TransactionNode(current->data);
                newNode->next = electronicsHead;
                electronicsHead = newNode;
                
                totalElectronics++;
                if (current->data.payment_method == "Credit Card") {
                    electronicsCreditCard++;
                }
            }
            current = current->next;
        }
    } else {
        // For other search methods in a linked list, we would need to
        // So we'll use linear search for all cases
        std::cout << "\nNote: Linked lists are best suited for linear search. "
                << "Other search methods require conversion to arrays.\n";
        
        TransactionNode* current = transactionHead;
        while (current != nullptr) {
            if (current->data.category == "Electronics") {
                // Add this transaction to our electronics list
                TransactionNode* newNode = new TransactionNode(current->data);
                newNode->next = electronicsHead;
                electronicsHead = newNode;
                
                totalElectronics++;
                if (current->data.payment_method == "Credit Card") {
                    electronicsCreditCard++;
                }
            }
            current = current->next;
        }
    }
    
    // Now sort the electronics transactions by price
    if (sortChoice == 1) {
        // Bubble Sort
        if (electronicsHead != nullptr && electronicsHead->next != nullptr) {
            bool swapped;
            TransactionNode *ptr1;
            TransactionNode *lptr = nullptr;
            
            do {
                swapped = false;
                ptr1 = electronicsHead;
                
                while (ptr1->next != lptr) {
                    if (ptr1->data.price > ptr1->next->data.price) {
                        // Swap data
                        Transaction temp = ptr1->data;
                        ptr1->data = ptr1->next->data;
                        ptr1->next->data = temp;
                        swapped = true;
                    }
                    ptr1 = ptr1->next;
                }
                lptr = ptr1;
            } while (swapped);
        }
    } else if (sortChoice == 2) {
        // Insertion Sort
        if (electronicsHead != nullptr && electronicsHead->next != nullptr) {
            TransactionNode* sorted = nullptr;
            TransactionNode* current = electronicsHead;
            
            while (current != nullptr) {
                TransactionNode* next = current->next;
                
                if (sorted == nullptr || sorted->data.price >= current->data.price) {
                    current->next = sorted;
                    sorted = current;
                } else {
                    TransactionNode* search = sorted;
                    while (search->next != nullptr && search->next->data.price < current->data.price) {
                        search = search->next;
                    }
                    current->next = search->next;
                    search->next = current;
                }
                
                current = next;
            }
            
            electronicsHead = sorted;
        }
    } else if (sortChoice == 3) {
        // Selection Sort
        if (electronicsHead != nullptr && electronicsHead->next != nullptr) {
            TransactionNode* current = electronicsHead;
            
            while (current != nullptr) {
                TransactionNode* min = current;
                TransactionNode* r = current->next;
                
                while (r != nullptr) {
                    if (r->data.price < min->data.price) {
                        min = r;
                    }
                    r = r->next;
                }
                
                if (min != current) {
                    // Swap data
                    Transaction temp = current->data;
                    current->data = min->data;
                    min->data = temp;
                }
                
                current = current->next;
            }
        }
    } else if (sortChoice == 4) {
        // Merge Sort
        electronicsHead = mergeSortTransactionsByPrice(electronicsHead);
    }
    
    auto end = std::chrono::high_resolution_clock::now();
    duration_ms = std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count();
    
    double percentage = (totalElectronics > 0) ? 
        (static_cast<double>(electronicsCreditCard) / totalElectronics) * 100.0 : 0.0;
    
    std::cout << "\nSearch and sort completed in " << duration_ms << " ms\n";
    std::cout << "Total Electronics purchases: " << totalElectronics << "\n";
    std::cout << "Electronics purchases with Credit Card: " << electronicsCreditCard << "\n";
    std::cout << "Percentage: " << percentage << "%\n";
    
    // Display some sorted electronics transactions (top 5)
    std::cout << "\nSorted Electronics Transactions (by price, ascending):\n";
    int count = 0;
    TransactionNode* current = electronicsHead;
    while (current != nullptr && count < 5) {
        std::cout << current->data.product << " - $" << current->data.price << " (" << current->data.payment_method << ")\n";
        current = current->next;
        count++;
    }
    
    // Clean up the electronics transactions list
    current = electronicsHead;
    while (current != nullptr) {
        TransactionNode* temp = current;
        current = current->next;
        delete temp;
    }
}

// Helper function for sorting transactions by price
TransactionNode* LinkedList::mergeSortTransactionsByPrice(TransactionNode* head) {
    // Base case
    if (head == nullptr || head->next == nullptr) {
        return head;
    }
    
    // Split the list into two halves
    TransactionNode* middle = getMiddle(head);
    TransactionNode* nextOfMiddle = middle->next;
    middle->next = nullptr;
    
    // Recursively sort both lists
    TransactionNode* left = mergeSortTransactionsByPrice(head);
    TransactionNode* right = mergeSortTransactionsByPrice(nextOfMiddle);
    
    // Merge the sorted lists by price
    TransactionNode* sortedList = sortedMergeByPrice(left, right);
    return sortedList;
}

TransactionNode* LinkedList::sortedMergeByPrice(TransactionNode* a, TransactionNode* b) {
    TransactionNode* result = nullptr;
    
    // Base cases
    if (a == nullptr) return b;
    if (b == nullptr) return a;
    
    // Pick smaller price value
    if (a->data.price <= b->data.price) {
        result = a;
        result->next = sortedMergeByPrice(a->next, b);
    } else {
        result = b;
        result->next = sortedMergeByPrice(a, b->next);
    }
    return result;
}

// Modified findFrequentWordsInOneStarReviews to use a linked list approach
void LinkedList::findFrequentWordsInOneStarReviews(int sortChoice, long long& duration_ms) {
    auto start = std::chrono::high_resolution_clock::now();
    
    // Process the review texts to find frequent words
    std::map<std::string, int> wordFrequency;
    int oneStarReviewCount = 0;
    
    // Linear Search to find 1-star reviews
    ReviewNode* current = reviewHead;
    while (current != nullptr) {
        if (current->data.rating == 1) {
            oneStarReviewCount++;
            std::istringstream iss(current->data.review_text);
            std::string word;
            while (iss >> word) {
                // Convert to lowercase and remove punctuation
                std::transform(word.begin(), word.end(), word.begin(), ::tolower);
                word.erase(std::remove_if(word.begin(), word.end(), 
                    [](char c) { return std::ispunct(c); }), word.end());
                
                if (word.length() > 2) { // Skip very short words
                    wordFrequency[word]++;
                }
            }
        }
        current = current->next;
    }
    
    // Create a linked list of word frequencies
    WordFreqNode* wordFreqHead = nullptr;
    for (const auto& pair : wordFrequency) {
        WordFreqNode* newNode = new WordFreqNode(pair.first, pair.second);
        newNode->next = wordFreqHead;
        wordFreqHead = newNode;
    }
    
    // Apply different sorting algorithms based on user choice
    if (sortChoice == 1) {
        // Bubble Sort
        if (wordFreqHead != nullptr && wordFreqHead->next != nullptr) {
            bool swapped;
            WordFreqNode *ptr1;
            WordFreqNode *lptr = nullptr;
            
            do {
                swapped = false;
                ptr1 = wordFreqHead;
                
                while (ptr1->next != lptr) {
                    if (ptr1->frequency < ptr1->next->frequency) {
                        // Swap data
                        std::string tempWord = ptr1->word;
                        int tempFreq = ptr1->frequency;
                        
                        ptr1->word = ptr1->next->word;
                        ptr1->frequency = ptr1->next->frequency;
                        
                        ptr1->next->word = tempWord;
                        ptr1->next->frequency = tempFreq;
                        
                        swapped = true;
                    }
                    ptr1 = ptr1->next;
                }
                lptr = ptr1;
            } while (swapped);
        }
    } else if (sortChoice == 2) {
        // Insertion Sort
        if (wordFreqHead != nullptr && wordFreqHead->next != nullptr) {
            WordFreqNode* sorted = nullptr;
            WordFreqNode* current = wordFreqHead;
            
            while (current != nullptr) {
                WordFreqNode* next = current->next;
                
                if (sorted == nullptr || sorted->frequency <= current->frequency) {
                    current->next = sorted;
                    sorted = current;
                } else {
                    WordFreqNode* search = sorted;
                    while (search->next != nullptr && search->next->frequency > current->frequency) {
                        search = search->next;
                    }
                    current->next = search->next;
                    search->next = current;
                }
                
                current = next;
            }
            
            wordFreqHead = sorted;
        }
    } else if (sortChoice == 3) {
        // Selection Sort
        if (wordFreqHead != nullptr && wordFreqHead->next != nullptr) {
            WordFreqNode* current = wordFreqHead;
            
            while (current != nullptr) {
                WordFreqNode* max = current;
                WordFreqNode* r = current->next;
                
                while (r != nullptr) {
                    if (r->frequency > max->frequency) {
                        max = r;
                    }
                    r = r->next;
                }
                
                if (max != current) {
                    // Swap data
                    std::string tempWord = current->word;
                    int tempFreq = current->frequency;
                    
                    current->word = max->word;
                    current->frequency = max->frequency;
                    
                    max->word = tempWord;
                    max->frequency = tempFreq;
                }
                
                current = current->next;
            }
        }
    } else if (sortChoice == 4) {
        // We'll implement a merge sort for this case
        wordFreqHead = mergeSortWordFreq(wordFreqHead);
    }
    
    auto end = std::chrono::high_resolution_clock::now();
    duration_ms = std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count();
    
    std::cout << "\nAnalysis completed in " << duration_ms << " ms\n";
    std::cout << "Number of 1-star reviews: " << oneStarReviewCount << "\n";
    std::cout << "Most frequent words in 1-star reviews:\n";
    
    int count = 0;
    WordFreqNode* ptr = wordFreqHead;
    while (ptr != nullptr && count < 10) {
        std::cout << ptr->word << ": " << ptr->frequency << " occurrences\n";
        ptr = ptr->next;
        count++;
    }
    
    // Clean up the word frequency list
    ptr = wordFreqHead;
    while (ptr != nullptr) {
        WordFreqNode* temp = ptr;
        ptr = ptr->next;
        delete temp;
    }
}

// Helper function to get the middle node of a WordFreqNode list
WordFreqNode* LinkedList::getMiddleWordFreq(WordFreqNode* head) {
    if (head == nullptr) return head;
    
    WordFreqNode* slow = head;
    WordFreqNode* fast = head->next;
    
    while (fast != nullptr) {
        fast = fast->next;
        if (fast != nullptr) {
            slow = slow->next;
            fast = fast->next;
        }
    }
    return slow;
}

// Helper function to merge two sorted WordFreqNode lists
WordFreqNode* LinkedList::sortedMergeWordFreq(WordFreqNode* a, WordFreqNode* b) {
    WordFreqNode* result = nullptr;
    
    // Base cases
    if (a == nullptr) return b;
    if (b == nullptr) return a;
    
    // Pick larger frequency value (for descending order)
    if (a->frequency >= b->frequency) {
        result = a;
        result->next = sortedMergeWordFreq(a->next, b);
    } else {
        result = b;
        result->next = sortedMergeWordFreq(a, b->next);
    }
    return result;
}

// Helper function to perform merge sort on WordFreqNode list
WordFreqNode* LinkedList::mergeSortWordFreq(WordFreqNode* head) {
    // Base case
    if (head == nullptr || head->next == nullptr) {
        return head;
    }
    
    // Split the list into two halves
    WordFreqNode* middle = getMiddleWordFreq(head);
    WordFreqNode* nextOfMiddle = middle->next;
    middle->next = nullptr;
    
    // Recursively sort both lists
    WordFreqNode* left = mergeSortWordFreq(head);
    WordFreqNode* right = mergeSortWordFreq(nextOfMiddle);
    
    // Merge the sorted lists
    WordFreqNode* sortedList = sortedMergeWordFreq(left, right);
    return sortedList;
}

// Load transactions from CSV
void loadTransactions(LinkedList& list, const std::string& filename) {
    std::ifstream file(filename);
    if (!file.is_open()) {
        std::cerr << "Error opening transactions file: " << filename << "\n";
        return;
    }
    std::string line;
    std::getline(file, line); // Skip header
    while (std::getline(file, line)) {
        std::stringstream ss(line);
        std::string token;
        Transaction t;
        int field = 0;
        while (std::getline(ss, token, ',')) {
            if (field == 0) t.customer_id = token;
            else if (field == 1) t.product = token;
            else if (field == 2) t.category = token;
            else if (field == 3) {
                try {
                    t.price = std::stod(token);
                } catch (...) {
                    t.price = 0.0;
                }
            }
            else if (field == 4) t.date = standardizeDate(token);
            else if (field == 5) t.payment_method = token;
            field++;
        }
        list.addTransaction(t);
    }
    file.close();
}

// Load reviews from CSV
void loadReviews(LinkedList& list, const std::string& filename) {
    std::ifstream file(filename);
    if (!file.is_open()) {
        std::cerr << "Error opening reviews file: " << filename << "\n";
        return;
    }
    std::string line;
    std::getline(file, line); // Skip header
    while (std::getline(file, line)) {
        std::stringstream ss(line);
        std::string token;
        Review r;
        int field = 0;
        while (std::getline(ss, token, ',')) {
            if (field == 0) r.product_id = token;
            else if (field == 1) r.customer_id = token;
            else if (field == 2) {
                try {
                    r.rating = std::stoi(token);
                } catch (...) {
                    r.rating = 0;
                }
            }
            else if (field == 3) {
                r.review_text = token;
                // Append remaining line (handles commas in review text)
                std::string remaining;
                std::getline(ss, remaining);
                if (!remaining.empty()) r.review_text += "," + remaining;
            }
            field++;
        }
        list.addReview(r);
    }
    file.close();
}

// Main function for user interaction
int main() {
    LinkedList list;
    loadTransactions(list, "transactions_cleaned.csv");
    loadReviews(list, "reviews_cleaned.csv");

    while (true) {
        std::cout << "\nE-commerce Transaction Analysis System (Linked List Implementation)\n";
        std::cout << "=================================================================\n";
        std::cout << "Choose a question to analyze:\n";
        std::cout << "1. Sort transactions by date and display counts\n";
        std::cout << "2. Calculate Electronics purchases with Credit Card percentage\n";
        std::cout << "3. Find frequent words in 1-star reviews\n";
        std::cout << "4. Exit\n";
        std::cout << "Enter choice (1-4): ";

        int question_choice;
        std::cin >> question_choice;

        if (question_choice == 4) {
            std::cout << "Exiting program.\n";
            break;
        }

        if (question_choice < 1 || question_choice > 3) {
            std::cout << "Invalid choice. Please select 1, 2, 3, or 4.\n";
            continue;
        }

        long long duration_ms = 0;

        if (question_choice == 1) {
            std::cout << "\nChoose Sorting Algorithm:\n";
            std::cout << "1. Bubble Sort\n";
            std::cout << "2. Insertion Sort\n";
            std::cout << "3. Selection Sort\n";
            std::cout << "4. Merge Sort\n";
            std::cout << "Enter choice (1-4): ";
            int sort_choice;
            std::cin >> sort_choice;
            list.sortTransactionsByDate(sort_choice, duration_ms);
        } else if (question_choice == 2) {
            std::cout << "\nChoose Search Algorithm:\n";
            std::cout << "1. Linear Search\n";
            std::cout << "2. Binary Search (Note: Using Linear Search for Linked List)\n";
            std::cout << "3. Jump Search (Note: Using Linear Search for Linked List)\n";
            std::cout << "4. Interpolation Search (Note: Using Linear Search for Linked List)\n";
            std::cout << "Enter choice (1-4): ";
            int search_choice;
            std::cin >> search_choice;
            
            std::cout << "\nChoose Sorting Algorithm:\n";
            std::cout << "1. Bubble Sort\n";
            std::cout << "2. Insertion Sort\n";
            std::cout << "3. Selection Sort\n";
            std::cout << "4. Quick Sort\n";
            std::cout << "Enter choice (1-4): ";
            int sort_choice;
            std::cin >> sort_choice;
            
            list.calculateElectronicsCreditCardPercentage(search_choice, sort_choice, duration_ms);
        } else if (question_choice == 3) {
            std::cout << "\nChoose Sorting Algorithm:\n";
            std::cout << "1. Bubble Sort\n";
            std::cout << "2. Insertion Sort\n";
            std::cout << "3. Selection Sort\n";
            std::cout << "4. Quick Sort\n";
            std::cout << "Enter choice (1-4): ";
            int sort_choice;
            std::cin >> sort_choice;
            list.findFrequentWordsInOneStarReviews(sort_choice, duration_ms);
        }
    }

    return 0;
}
